Checkout command:
svn co http://subclipse.tigris.org/svn/subclipse/tags/subclipse/1.8.9/subclipse --username guest

Thread safety of Eclipse Draw2d and GEF: http://wiki.eclipse.org/GEF_Troubleshooting_Guide#Background_Threads_and_Updates

83481 lines of Java by sloccount (including the double-count of the svnkit stuff)
Initial run: 7931 errors 

+10 minutes (0:10): 6978 mostly by annotating the top-level classes in the most 'errorful' files @UIType
Note: Running the checker over the whole source base (every line other than the extra svnkit stuff)
takes about 35 seconds.
+5 minutes (0:15): 6460 by more UIType annos, and marking a few anonymous inner class methods @UIEffect
+15 minutes (0:30): 5464 by more of the same
+15 minutes (0:45): 4695 by more of the same
+15 minutes (1:00): 4220 much of the same, annotating all the dialog subclasses @UIType, and marking BusyIndicator.showWhile as taking a @UI Runnable
+20 minutes (1:20): 3954 marking some @UI Runnables and making an actions subpackage @UIPackage (lots of invalid isEnabled() overrides)
+5 min (1:25): 3441 by making the .wizards subpackage @UIPackage
+5 min (1:30): 2555 by making .wizards.dialogs and .dialogs @UIPackage
+5 min (1:35): 2095 by making .conflicts and .wizards.sharing @UIPackage
+5 min (1:40): 1759 by making graph.editors, graph.popup.actions, and ui.subscriber @UIPackage
+5 min (1:45): 1073, using a script that takes a package name and spits out an appropriate package-info.java with @UIPackage
+5 min (1:50): 834 by making AnnotateView @UIType and .decorators @UIPackage

Apparently much of this was false progress.  I fixed a bug in the checker: @UIPackage should not
make anonymous inner classes @UIType, since they're often supposed to be effect-polymorphic closure
types... So we're back to 2469...

+10 min (2:00): 2312
+10 min (2:10): 2168
+15 min (2:25): 798 after fixing a few checker bugs and changing the anonymous inner class method defaults to inheriting the lowest overridden effect
+35 min (3:00): 568
+5 min (3:05): 560
+10 min (3:15): 483 by scripting to mark all "new Runnable" passed to [a]syncExec as @UI
+10 min (3:25): 426 by scripting to mark the BusyIndicator Runnables @UI, and fixing a couple missing imports.

Interesting to note that IWorkbenchSite.getShell(), specified as safe apparently by IShellProvider, says in its docs that it's not intended to be called from outside the UI thread, because the resulting display may be wrong.  This is dozens of errors removed in SVNHistoryPage, but with questionable semantics.

+45 min (4:10): 424 after undoing a few wrong annos and going back up to 500, followed by fine-grained annotation
+60 min (5:10): 354 fine-grained annotation
+20 min (5:30): 319
+60 min (6:30): 300 after tons of finnagling with SVNHistoryPage, then switching to knocking off the 1-error files
+15 min (6:45): 277 fine-grained annotation
+60 min (7:45): 244
+45 min (8:30): 177
+45 min (9:15): 152
+5 min (9:20): 141 (CompareEditorInput is mostly a UIType heirarchy, though it implements
                    canRunAsJob(), so a subclass can make itself safe and run on a different thread
                    (or make itself unsafe and run on a different thread)
+15 min (9:35): 134
+10 min (9:45): 127
+15 min (10:00): 119 may have found a bug in CommitCommentArea.
+40 min (10:40): 100

Digging into the SVNOperation heirarchy a bit more, since the graph package's Activator defines a
showErrorDialog that takes a boolean for whether it's being called in the UI thread.  It's only
called from GraphBackgroundTask, which is a safe (canRunAsJob() == true) with the UI thread flag set
to false (correctly).  So I've made SVNOperation safe, and will (for now) live with the error
warnings about invalid overrides for those classes that override canRunAsJob to return true (a
couple also return a member variable....).  Apparently TeamOperation also inherits from
IRunnableWithProgress - perhaps that interface is polymorphic after all, and the progress monitor
methods are safe.

http://www.vogella.com/articles/EclipseJobs/article.html#eclipsejobs_iprogressmonitor seems to
indicate that IProgressMonitor should be safe... but looking at the implementation of
ProgressMonitorPart, that one's not.  Perhaps it's polymorphic... I'm making it polymorphic.

Commit Operation overrides canRunAsJob() to return a field canRunAsJob, and there's an accompanying
setCanRunAsJob(boolean).  RevertOperation, UpdateOperation, SwitchOperation do the same.
ShowDifferencesAsUnifiedDiffOperationWC does the same thing more or less, though using a flag for
whether or not it's a graphical operation.

RevertOperation, UpdateOperation, and SwitchOperation extend RepositoryProviderOperation (which
extends SVNOperation).

None of the setCanRunAsJob() calls ever pass something other than 'true' as far as I can tell (the
calls to the operation method are only from the corresponding actions, which have their own
canRunAsJob flag, which also defaults to true and the action setter is never called).

UpdateSynchronizeOperation and MarkMergedSynchronizeOperation, and
OverrideAndUpdateSynchronizeOperation, override canRunAsJob from
SVNSynchronizeOperation (which extends org.eclipse.team.ui.SynchronizeModelOperation), and all
return true.

So almost all of these classes should be marked SAFE as used, though there is code there that could push
them onto the UI thread with UI operations.  The only exception is
ShowDifferencesAsUnifiedDiffOperationWC, which does have nontrivial calls to setGraphicalCompare().
Need to investigate further.

Note that SynchronizeModelOperation inherits directly from TeamOperation, which defaults to the UI
thread, so it can be @UIType.  SVNSynchronizeOperation then inherits from that.  So that heirarchy
can default to UI, except for those that override canRunAsJob to return true.

+1:40 (12:20): 108.  Error count went up, but I fixed a lot of improper annotations, and may have
found a bug in MarkMergedSynchronizeOperation.

According to the docs for IProgressService, IRunnableWithProgress appears to be polymorphic, since
IProgressService is a UI-only class that provides a method that may fork the IRunnableWithProgress
into a new thread.  I have not yet marked it as such but will need to.

+15 (12:35): 99!
+30 (13:05): 82!
+30 (13:35): 76
+30 (14:05): 66
+15 (14:20): 60

Note: AbstractUIPlugin.getImageRegistry() is only safe after the workbench is running, because it
may call createImageRegistry, which should usually be okay for plugins.
Note: FontRegistry.get() is safe, but the code makes it clear the devs only do so for backwards
compatibility.
Note: Eclipse has lots of things that look up an Object by Foo.class and require the client to cast
to Foo, which is a source of much imprecision (see getImageDescriptor and the like).

+30 (14:50): 55
+5 (14:55): 53
+1:15 (16:10): 38
+5 (16:15): 36 (actually 35 after I fixed a stupid typo (@SafeEFfect instead of @SafeEffect) in the stub file)
+5 (16:20): 34

FetchMembersOperation is really a UI variant of the SVNOperation, but doesn't override canRunAsJob()
to return false.  But in practice, it's safe because it's always run explicitly from a UI context
rather than through an IProgressService.
+5 (16:25): 34, but better marked.
+30 (16:55): 28
